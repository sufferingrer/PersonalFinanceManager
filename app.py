import pandas as pd
import streamlit as st
import plotly.express as px
from langchain.chat_models import ChatOpenAI 
import matplotlib.pyplot as plt
import json
from io import StringIO
import re
from utils.audio_utils import AudioProcessor
import logging
import io
import sounddevice as sd
import soundfile as sf
import numpy as np
import av
import wave
import queue
from sklearn.linear_model import LinearRegression
import threading
from streamlit_webrtc import webrtc_streamer, WebRtcMode, AudioProcessorBase
import os
import tempfile
import speech_recognition as sr
from gtts import gTTS
from dotenv import load_dotenv
load_dotenv()

# Import custom modules
from utils.audio_utils import AudioProcessor
from utils.data_utils import parse_financial_data, parse_csv_data, analyze_financial_trends, categorize_transactions
from utils.nlp_utils import is_complex_query, handle_unclear_request, extract_date_range, extract_financial_goal
from rag.document_store import DocumentStore
from rag.retriever import RAGRetriever
from agents.financial_agent import FinancialAgent

# Setup logging
logging.basicConfig(level=logging.DEBUG)

# Initialize session state
if 'financial_data' not in st.session_state:
    st.session_state.financial_data = pd.DataFrame()

def safe_rerun():
    """
    Safely rerun the application.
    """
    try:
        st.rerun()
    except Exception as e:
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ä—É—á–Ω—É—é. –û—à–∏–±–∫–∞: {str(e)}")
        st.stop()

class AudioRecorder(AudioProcessorBase):
    """
    Class for capturing audio frames via webrtc_streamer.
    Stores all frames in self.frames while recording=True.
    """
    def __init__(self):
        self.frames = []
        self.recording = False

    def recv(self, frame):
        if self.recording:
            # Convert frame to numpy array and save
            audio_data = frame.to_ndarray()
            self.frames.append(audio_data)
        return frame

class AppState:
    def __init__(self):
        self.financial_data = pd.DataFrame()
        self.chat_history = []
        self.recorder = AudioRecorder()
        self.recording = False
        self.temp_audio = None
        self.show_preview = False
        self.raw_data = None
        self.processed_data = pd.DataFrame()
        self.ai_analysis = {
            "columns": {},
            "metrics": [],
            "categories": [],
            "visualizations": []
        }
        self.audio_processor = AudioProcessor()
        self.document_store = DocumentStore()
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º DeepSeek API —á–µ—Ä–µ–∑ OpenAI —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        from openai import OpenAI
        client = OpenAI(api_key=os.getenv("DEEPSEEK_API_KEY"), base_url="https://api.deepseek.com")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å —Å –ø–æ–º–æ—â—å—é LangChain
        self.llm = ChatOpenAI(
            openai_api_key=os.getenv("DEEPSEEK_API_KEY"),
            openai_api_base="https://api.deepseek.com",
            model_name="deepseek-chat",
            temperature=0.7
        )
        self.rag_retriever = RAGRetriever(self.llm, self.document_store)
        self.financial_agent = FinancialAgent(self.llm)

# Initialize application state
if 'app_state' not in st.session_state:
    st.session_state.app_state = AppState()

@st.cache_data
def analyze_data_with_ai(data_input):
    """
    Analyze data using AI.
    
    Args:
        data_input: Data to analyze
        
    Returns:
        Analysis results
    """
    analysis_prompt = f"""
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ CSV –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.
    –¢–≤–æ—è –∑–∞–¥–∞—á–∞:
    1. –û—Ç–æ–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, datetime, numeric, category, text).
    2. –û—Ç—Ñ–∏–ª—å—Ç—Ä—É–π –Ω–µ–Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Å—Ç–∞–≤—å —Ç–æ–ª—å–∫–æ —Ç–µ —Å—Ç–æ–ª–±—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≥–æ–¥–Ω—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º.
    3. –°—Ñ–æ—Ä–º–∏—Ä—É–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è–º, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö.

    –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON —Å —Ç–∞–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π:
    {{
        "columns": {{"–Ω–∞–∑–≤–∞–Ω–∏–µ_—Å—Ç–æ–ª–±—Ü–∞": "—Ç–∏–ø", ...}},
        "metrics": ["–∏–º–µ–Ω–∞ —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤"],
        "categories": ["–∏–º–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤"],
        "visualizations": [
            {{
                "type": "—Ç–∏–ø –¥–∏–∞–≥—Ä–∞–º–º—ã",
                "x": "–Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –æ—Å–∏ X",
                "y": "–Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –æ—Å–∏ Y",
                "desc": "–æ–ø–∏—Å–∞–Ω–∏–µ"
            }}
        ]
    }}

    –î–∞–Ω–Ω—ã–µ (–ø–µ—Ä–≤—ã–µ 2000 —Å–∏–º–≤–æ–ª–æ–≤):
    {data_input[:2000]}
    """
    
    raw_response = st.session_state.app_state.rag_retriever.retrieve_and_generate(analysis_prompt)["response"]
    
    try:
        json_str = re.search(r'\{.*\}', raw_response, re.DOTALL).group()
        return json.loads(json_str)
    except (AttributeError, json.JSONDecodeError) as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return {
            "columns": {},
            "metrics": [],
            "categories": [],
            "visualizations": []
        }

# Page configuration
st.set_page_config(page_title="–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫", layout="wide", page_icon="üí∞")
st.markdown(
    """
    <style>
    .big-font {
        font-size: 40px !important;
        font-weight: bold;
        text-align: center;
        color: #2E86C1;
    }
    .medium-font {
        font-size: 20px !important;
        text-align: justify;
        color: #34495E;
    }
    .stButton button {
        background-color: #2E86C1;
        color: white;
        font-weight: bold;
        border-radius: 10px;
        padding: 10px 20px;
    }
    .stButton button:hover {
        background-color: #3498DB;
    }
    .stFileUploader div {
        border: 2px dashed #2E86C1;
        border-radius: 10px;
        padding: 20px;
    }
    </style>
    """,
    unsafe_allow_html=True,
)

def main_page():
    """Display the application's main page"""
    st.markdown('<p class="big-font">–ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏—á–Ω—ã–º–∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±—é–¥–∂–µ—Ç–∞</p>',
                unsafe_allow_html=True)
    st.markdown(
        """
        <p class="medium-font">
        –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫! üöÄ<br><br>
        –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≤–∑—è—Ç—å –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª—å —Å–≤–æ–∏ —Ñ–∏–Ω–∞–Ω—Å—ã, –Ω–∞—É—á–∏—Ç—å—Å—è –≥—Ä–∞–º–æ—Ç–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å –±—é–¥–∂–µ—Ç 
        –∏ –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ü–µ–ª–µ–π. –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è 
        –≤–∞—à–∏–º–∏ –¥–æ—Ö–æ–¥–∞–º–∏ –∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏, –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–¥—É—â–µ–≥–æ.
        </p>
        """,
        unsafe_allow_html=True,
    )
    
    st.subheader("‚ú® –ö–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
    col1, col2, col3 = st.columns(3)
    with col1:
        st.markdown(
            """
            <div class="feature-card">
                <h3>üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤</h3>
                <p>–†–µ–≥—É–ª—è—Ä–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–≤–æ–∏ —Ç—Ä–∞—Ç—ã –∏ –Ω–∞—Ö–æ–¥–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏.</p>
            </div>
            """,
            unsafe_allow_html=True,
        )
    with col2:
        st.markdown(
            """
            <div class="feature-card">
                <h3>üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞</h3>
                <p>–°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –±—é–¥–∂–µ—Ç—ã –∏ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º.</p>
            </div>
            """,
            unsafe_allow_html=True,
        )
    with col3:
        st.markdown(
            """
            <div class="feature-card">
                <h3>üéØ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏</h3>
                <p>–°—Ç–∞–≤—å—Ç–µ —Ü–µ–ª–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏.</p>
            </div>
            """,
            unsafe_allow_html=True,
        )
        
    st.subheader("üìã –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    st.write("–í–æ—Ç –∫–∞–∫ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:")
    example_data = pd.DataFrame({
        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": ["–ï–¥–∞", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "–ñ–∏–ª—å–µ"],
        "–°—É–º–º–∞": [15000, 5000, 7000, 20000]
    })
    col1, col2 = st.columns(2)
    with col1:
        st.write("**–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º**")
        st.bar_chart(example_data.set_index("–ö–∞—Ç–µ–≥–æ—Ä–∏—è"))
    with col2:
        st.write("**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞**")
        fig, ax = plt.subplots()
        example_data.groupby("–ö–∞—Ç–µ–≥–æ—Ä–∏—è")["–°—É–º–º–∞"].sum().plot(kind="pie", autopct="%1.1f%%", ax=ax)
        st.pyplot(fig)
        
    st.subheader("üí¨ –û—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    col1, col2, col3 = st.columns(3)
    with col1:
        st.markdown(
            """
            <div class="testimonial-card">
                <h4>–ê–Ω–Ω–∞, 28 –ª–µ—Ç</h4>
                <p>"–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ –º–æ–π –ø–æ–¥—Ö–æ–¥ –∫ —Ñ–∏–Ω–∞–Ω—Å–∞–º. –¢–µ–ø–µ—Ä—å —è —Ç–æ—á–Ω–æ –∑–Ω–∞—é, –∫—É–¥–∞ —É—Ö–æ–¥—è—Ç –º–æ–∏ –¥–µ–Ω—å–≥–∏!"</p>
            </div>
            """,
            unsafe_allow_html=True,
        )
    with col2:
        st.markdown(
            """
            <div class="testimonial-card">
                <h4>–ò–≤–∞–Ω, 35 –ª–µ—Ç</h4>
                <p>"–ë–ª–∞–≥–æ–¥–∞—Ä—è —ç—Ç–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é —è —Å–º–æ–≥ –Ω–∞–∫–æ–ø–∏—Ç—å –Ω–∞ –æ—Ç–ø—É—Å–∫ –≤—Å–µ–≥–æ –∑–∞ 4 –º–µ—Å—è—Ü–∞!"</p>
            </div>
            """,
            unsafe_allow_html=True,
        )
    with col3:
        st.markdown(
            """
            <div class="testimonial-card">
                <h4>–ï–ª–µ–Ω–∞, 42 –≥–æ–¥–∞</h4>
                <p>"–û—Ç–ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–µ–º–µ–π–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞. –†–µ–∫–æ–º–µ–Ω–¥—É—é –≤—Å–µ–º!"</p>
            </div>
            """,
            unsafe_allow_html=True,
        )

def data_input_page():
    """Display the data input page"""
    st.markdown('<p class="big-font">–í–≤–æ–¥ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö</p>', unsafe_allow_html=True)
    st.write("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–≤–æ–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–∞—Ö –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∏—Ö –≤—Ä—É—á–Ω—É—é.")
    
    tab1, tab2 = st.tabs(["–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞", "–†—É—á–Ω–æ–π –≤–≤–æ–¥"])
    
    with tab1:
        st.write("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.")
        uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ CSV-—Ñ–∞–π–ª", type="csv")
        
        if uploaded_file is not None:
            df = parse_csv_data(uploaded_file)
            if df is not None:
                st.session_state.app_state.financial_data = df
                st.session_state.financial_data = df
                st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
                st.dataframe(df.head())
                
                # Add data to document store for RAG retrieval
                st.session_state.app_state.document_store.add_financial_data(df)
                
                # Redirect to analyze page
                st.session_state.page = "analyze"
                safe_rerun()
    
    with tab2:
        st.write("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:")
        st.code("""
        –î–æ—Ö–æ–¥—ã:
        - –ó–∞—Ä–ø–ª–∞—Ç–∞: 80000
        - –§—Ä–∏–ª–∞–Ω—Å: 20000

        –†–∞—Å—Ö–æ–¥—ã:
        - –ê—Ä–µ–Ω–¥–∞: 30000
        - –ü—Ä–æ–¥—É–∫—Ç—ã: 15000
        - –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: 5000
        - –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è: 10000
        """)
        
        text_data = st.text_area("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:", height=300)
        
        if st.button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"):
            if text_data:
                df = parse_financial_data(text_data)
                if not df.empty:
                    st.session_state.app_state.financial_data = df
                    st.session_state.financial_data = df
                    st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
                    st.dataframe(df)
                    
                    # Add data to document store for RAG retrieval
                    st.session_state.app_state.document_store.add_financial_data(df)
                    
                    # Redirect to analyze page
                    st.session_state.page = "analyze"
                    safe_rerun()
                else:
                    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞.")
            else:
                st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.")

def analyze_page():
    """Display the data analysis page"""
    st.markdown('<p class="big-font">–ê–Ω–∞–ª–∏–∑ —Ñ–∏–Ω–∞–Ω—Å–æ–≤</p>', unsafe_allow_html=True)
    
    if st.session_state.app_state.financial_data.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        if st.button("–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ"):
            st.session_state.page = "data_input"
            safe_rerun()
        return
    
    # Show basic statistics
    st.subheader("–û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö")
    st.dataframe(st.session_state.app_state.financial_data)
    
    # Create visualizations
    st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
    
    # Determine if we have income and expense data
    if "–¢–∏–ø" in st.session_state.app_state.financial_data.columns:
        # Create income and expense summary
        income_data = st.session_state.app_state.financial_data[st.session_state.app_state.financial_data["–¢–∏–ø"] == "–î–æ—Ö–æ–¥—ã"]
        expense_data = st.session_state.app_state.financial_data[st.session_state.app_state.financial_data["–¢–∏–ø"] == "–†–∞—Å—Ö–æ–¥—ã"]
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ—Ö–æ–¥–æ–≤**")
            if not income_data.empty and "–ö–∞—Ç–µ–≥–æ—Ä–∏—è" in income_data.columns:
                fig = px.pie(income_data, values="–°—É–º–º–∞", names="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", title="–î–æ—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Ö–æ–¥–∞—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.")
                
        with col2:
            st.write("**–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤**")
            if not expense_data.empty and "–ö–∞—Ç–µ–≥–æ—Ä–∏—è" in expense_data.columns:
                fig = px.pie(expense_data, values="–°—É–º–º–∞", names="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", title="–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
                st.plotly_chart(fig, use_container_width=True)
            else:
                st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.")
        
        # Create budget summary
        if not income_data.empty and not expense_data.empty:
            st.subheader("–ë—é–¥–∂–µ—Ç–Ω–∞—è —Å–≤–æ–¥–∫–∞")
            total_income = income_data["–°—É–º–º–∞"].sum()
            total_expenses = expense_data["–°—É–º–º–∞"].sum()
            balance = total_income - total_expenses
            
            col1, col2, col3 = st.columns(3)
            col1.metric("–û–±—â–∏–π –¥–æ—Ö–æ–¥", f"{total_income:,.0f} ‚ÇΩ")
            col2.metric("–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã", f"{total_expenses:,.0f} ‚ÇΩ")
            col3.metric("–ë–∞–ª–∞–Ω—Å", f"{balance:,.0f} ‚ÇΩ", f"{balance/total_income*100:.1f}%" if total_income > 0 else "0%")
            
            # Budget bar chart
            budget_data = pd.DataFrame({
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": ["–î–æ—Ö–æ–¥—ã", "–†–∞—Å—Ö–æ–¥—ã", "–ë–∞–ª–∞–Ω—Å"],
                "–°—É–º–º–∞": [total_income, total_expenses, balance]
            })
            
            fig = px.bar(budget_data, x="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", y="–°—É–º–º–∞", title="–û–±–∑–æ—Ä –±—é–¥–∂–µ—Ç–∞",
                         color="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", color_discrete_map={"–î–æ—Ö–æ–¥—ã": "green", "–†–∞—Å—Ö–æ–¥—ã": "red", "–ë–∞–ª–∞–Ω—Å": "blue"})
            st.plotly_chart(fig, use_container_width=True)
    else:
        # Simple visualization for data without income/expense classification
        if "–ö–∞—Ç–µ–≥–æ—Ä–∏—è" in st.session_state.app_state.financial_data.columns and "–°—É–º–º–∞" in st.session_state.app_state.financial_data.columns:
            st.write("**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º**")
            fig = px.pie(st.session_state.app_state.financial_data, values="–°—É–º–º–∞", names="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
            st.plotly_chart(fig, use_container_width=True)
            
            st.write("**–°—É–º–º—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º**")
            fig = px.bar(st.session_state.app_state.financial_data.groupby("–ö–∞—Ç–µ–≥–æ—Ä–∏—è")["–°—É–º–º–∞"].sum().reset_index(),
                         x="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", y="–°—É–º–º–∞", title="–°—É–º–º—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
            st.plotly_chart(fig, use_container_width=True)
    
    # AI Analysis
    st.subheader("–ò–ò-–∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
    if st.button("–ü—Ä–æ–≤–µ—Å—Ç–∏ –ò–ò-–∞–Ω–∞–ª–∏–∑"):
        with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é –ò–ò..."):
            csv_buffer = StringIO()
            st.session_state.app_state.financial_data.to_csv(csv_buffer)
            csv_data = csv_buffer.getvalue()
            
            st.session_state.app_state.ai_analysis = analyze_data_with_ai(csv_data)
            
            st.success("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            
            # Display AI findings
            if st.session_state.app_state.ai_analysis["visualizations"]:
                st.write("**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏:**")
                for viz in st.session_state.app_state.ai_analysis["visualizations"]:
                    st.write(f"- {viz['desc']}")
                    
                    # Create the recommended visualization if columns exist
                    if viz['x'] in st.session_state.app_state.financial_data.columns and viz['y'] in st.session_state.app_state.financial_data.columns:
                        if viz['type'].lower() == 'bar':
                            fig = px.bar(st.session_state.app_state.financial_data, x=viz['x'], y=viz['y'], title=viz['desc'])
                            st.plotly_chart(fig, use_container_width=True)
                        elif viz['type'].lower() == 'pie':
                            fig = px.pie(st.session_state.app_state.financial_data, values=viz['y'], names=viz['x'], title=viz['desc'])
                            st.plotly_chart(fig, use_container_width=True)
                        elif viz['type'].lower() == 'line':
                            fig = px.line(st.session_state.app_state.financial_data, x=viz['x'], y=viz['y'], title=viz['desc'])
                            st.plotly_chart(fig, use_container_width=True)
                        elif viz['type'].lower() == 'scatter':
                            fig = px.scatter(st.session_state.app_state.financial_data, x=viz['x'], y=viz['y'], title=viz['desc'])
                            st.plotly_chart(fig, use_container_width=True)
    
    # Financial trends analysis
    if "–î–∞—Ç–∞" in st.session_state.app_state.financial_data.columns and "–°—É–º–º–∞" in st.session_state.app_state.financial_data.columns:
        st.subheader("–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤")
        trend_data = analyze_financial_trends(st.session_state.app_state.financial_data)
        
        if trend_data["trends"]:
            st.write("**–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã:**")
            for trend in trend_data["trends"]:
                st.write(f"- –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{trend['category']}': {trend['direction']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {trend['confidence']:.2f})")
        
        if trend_data["projections"]:
            st.write("**–ü—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥:**")
            projection_data = pd.DataFrame({
                "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": list(trend_data["projections"].keys()),
                "–ü—Ä–æ–≥–Ω–æ–∑": list(trend_data["projections"].values())
            })
            st.dataframe(projection_data)
            
            fig = px.bar(projection_data, x="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", y="–ü—Ä–æ–≥–Ω–æ–∑", title="–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥")
            st.plotly_chart(fig, use_container_width=True)

def assistant_page():
    """Display the financial assistant interaction page"""
    st.markdown('<p class="big-font">–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç</p>', unsafe_allow_html=True)
    
    # Display tabs for text and voice interfaces
    tab1, tab2 = st.tabs(["–¢–µ–∫—Å—Ç–æ–≤—ã–π —á–∞—Ç", "–ì–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç"])
    
    with tab1:
        st.write("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –≤–∞—à–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–∞—Ö, –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–≤–µ—Ç –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑.")
        
        # Check if we have financial data
        if st.session_state.app_state.financial_data.empty:
            st.warning("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
            if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
                st.session_state.page = "data_input"
                safe_rerun()
        
        # User input
        user_query = st.text_input("–í–∞—à –∑–∞–ø—Ä–æ—Å:")
        
        # Process user query
        if user_query:
            with st.spinner("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å..."):
                # Check for unclear requests
                unclear_response = handle_unclear_request(user_query)
                if unclear_response:
                    st.session_state.app_state.chat_history.append({"role": "user", "content": user_query})
                    st.session_state.app_state.chat_history.append({"role": "assistant", "content": unclear_response})
                # Check if it's a complex query
                elif is_complex_query(user_query):
                    # Use financial agent for complex queries
                    response = st.session_state.app_state.financial_agent.handle_complex_query(
                        user_query, st.session_state.app_state.financial_data
                    )
                    
                    # Format response for chat
                    formatted_response = f"**{response['task_type']}**\n\n{response['analysis']}\n\n**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
                    for rec in response['recommendations']:
                        formatted_response += f"- {rec}\n"
                    
                    st.session_state.app_state.chat_history.append({"role": "user", "content": user_query})
                    st.session_state.app_state.chat_history.append({"role": "assistant", "content": formatted_response})
                    
                    # Display visualizations if available
                    if response["visualizations"]:
                        for viz in response["visualizations"]:
                            # Check if we have the required columns
                            x_col = viz["data"]["x"]
                            y_col = viz["data"]["y"]
                            
                            if x_col in st.session_state.app_state.financial_data.columns and y_col in st.session_state.app_state.financial_data.columns:
                                if viz["type"].lower() == "pie":
                                    fig = px.pie(
                                        st.session_state.app_state.financial_data, 
                                        values=y_col, 
                                        names=x_col, 
                                        title=viz["title"]
                                    )
                                    st.plotly_chart(fig)
                                elif viz["type"].lower() in ["bar", "column"]:
                                    fig = px.bar(
                                        st.session_state.app_state.financial_data, 
                                        x=x_col, 
                                        y=y_col, 
                                        title=viz["title"]
                                    )
                                    st.plotly_chart(fig)
                                elif viz["type"].lower() == "line":
                                    fig = px.line(
                                        st.session_state.app_state.financial_data, 
                                        x=x_col, 
                                        y=y_col, 
                                        title=viz["title"]
                                    )
                                    st.plotly_chart(fig)
                else:
                    # Use RAG for normal queries
                    rag_response = st.session_state.app_state.rag_retriever.retrieve_and_generate(
                        user_query, st.session_state.app_state.financial_data
                    )
                    
                    st.session_state.app_state.chat_history.append({"role": "user", "content": user_query})
                    st.session_state.app_state.chat_history.append({"role": "assistant", "content": rag_response["response"]})
        
        # Display chat history
        st.subheader("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞")
        for message in st.session_state.app_state.chat_history:
            if message["role"] == "user":
                st.markdown(f"**–í—ã:** {message['content']}")
            else:
                st.markdown(f"**–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:** {message['content']}")
        
        # Clear chat button
        if st.button("–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"):
            st.session_state.app_state.chat_history = []
            safe_rerun()
    
    with tab2:
        st.write("–û–±—â–∞–π—Ç–µ—Å—å —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º —Å –ø–æ–º–æ—â—å—é –≥–æ–ª–æ—Å–∞.")
        
        # Initialize webrtc streamer for audio recording
        webrtc_ctx = webrtc_streamer(
            key="voice-assistant",
            mode=WebRtcMode.SENDONLY,
            audio_processor_factory=lambda: st.session_state.app_state.recorder,
            rtc_configuration={"iceServers": [{"urls": ["stun:stun.l.google.com:19302"]}]},
        )
        
        # Recording controls
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üé§ –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å" if not st.session_state.app_state.recording else "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å"):
                st.session_state.app_state.recording = not st.session_state.app_state.recording
                st.session_state.app_state.recorder.recording = st.session_state.app_state.recording
                
                if not st.session_state.app_state.recording and st.session_state.app_state.recorder.frames:
                    # Convert frames to WAV bytes when stopping recording
                    audio_bytes = st.session_state.app_state.audio_processor.frames_to_wav_bytes(
                        st.session_state.app_state.recorder.frames
                    )
                    st.session_state.app_state.temp_audio = audio_bytes
                    st.session_state.app_state.show_preview = True
                    
                    # Process audio with DeepSpeech
                    with st.spinner("–†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å..."):
                        transcribed_text = st.session_state.app_state.audio_processor.speech_to_text(audio_bytes)
                        
                        if transcribed_text and transcribed_text != "–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏":
                            st.success(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {transcribed_text}")
                            
                            # Process the transcribed query
                            with st.spinner("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å..."):
                                # Check for unclear requests
                                unclear_response = handle_unclear_request(transcribed_text)
                                if unclear_response:
                                    response_text = unclear_response
                                # Check if it's a complex query
                                elif is_complex_query(transcribed_text):
                                    # Use financial agent for complex queries
                                    agent_response = st.session_state.app_state.financial_agent.handle_complex_query(
                                        transcribed_text, st.session_state.app_state.financial_data
                                    )
                                    
                                    # Format response for voice
                                    response_text = f"{agent_response['analysis']} –ú–æ–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: "
                                    for rec in agent_response['recommendations'][:2]:  # Limit to 2 recommendations for voice
                                        response_text += f"{rec}. "
                                else:
                                    # Use RAG for normal queries
                                    rag_response = st.session_state.app_state.rag_retriever.retrieve_and_generate(
                                        transcribed_text, st.session_state.app_state.financial_data
                                    )
                                    response_text = rag_response["response"]
                                
                                # Convert response to speech
                                with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç..."):
                                    response_audio, sample_rate = st.session_state.app_state.audio_processor.text_to_speech(response_text)
                                    
                                    # Add to chat history
                                    st.session_state.app_state.chat_history.append({"role": "user", "content": transcribed_text})
                                    st.session_state.app_state.chat_history.append({"role": "assistant", "content": response_text})
                                    
                                    # Play audio response
                                    st.audio(response_audio, format="audio/wav")
                                    
                                    # Clear recording
                                    st.session_state.app_state.recorder.frames = []
                                    safe_rerun()
                        else:
                            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                            st.session_state.app_state.recorder.frames = []
        
        with col2:
            if st.session_state.app_state.recording:
                st.info("üî¥ –ò–¥–µ—Ç –∑–∞–ø–∏—Å—å... –ì–æ–≤–æ—Ä–∏—Ç–µ –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω.")
        
        # Show audio recording preview if available
        if st.session_state.app_state.show_preview and st.session_state.app_state.temp_audio:
            st.audio(st.session_state.app_state.temp_audio, format="audio/wav")
            
            if st.button("–û—á–∏—Å—Ç–∏—Ç—å –∞—É–¥–∏–æ"):
                st.session_state.app_state.temp_audio = None
                st.session_state.app_state.show_preview = False
                st.session_state.app_state.recorder.frames = []
                safe_rerun()

def budget_planning_page():
    """Display the budget planning page"""
    st.markdown('<p class="big-font">–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞</p>', unsafe_allow_html=True)
    
    if st.session_state.app_state.financial_data.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±—é–¥–∂–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        if st.button("–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ"):
            st.session_state.page = "data_input"
            safe_rerun()
        return
    
    # Create budget planning tabs
    tab1, tab2 = st.tabs(["–ú–µ—Å—è—á–Ω—ã–π –±—é–¥–∂–µ—Ç", "–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"])
    
    with tab1:
        st.write("–°–æ–∑–¥–∞–π—Ç–µ –ø–ª–∞–Ω –±—é–¥–∂–µ—Ç–∞ –Ω–∞ –º–µ—Å—è—Ü –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Income data input
            st.subheader("–î–æ—Ö–æ–¥—ã")
            
            # Extract existing income data if available
            income_categories = []
            income_amounts = []
            
            if "–¢–∏–ø" in st.session_state.app_state.financial_data.columns:
                income_data = st.session_state.app_state.financial_data[st.session_state.app_state.financial_data["–¢–∏–ø"] == "–î–æ—Ö–æ–¥—ã"]
                if not income_data.empty and "–ö–∞—Ç–µ–≥–æ—Ä–∏—è" in income_data.columns:
                    for category, group in income_data.groupby("–ö–∞—Ç–µ–≥–æ—Ä–∏—è"):
                        income_categories.append(category)
                        income_amounts.append(group["–°—É–º–º–∞"].sum())
            
            # Allow modifying income data
            for i, category in enumerate(income_categories):
                st.text_input(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ—Ö–æ–¥–∞ {i+1}", value=category, key=f"income_cat_{i}")
                st.number_input(f"–°—É–º–º–∞ {i+1}", value=float(income_amounts[i]), key=f"income_amount_{i}")
            
            # Add new income category
            st.text_input("–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ—Ö–æ–¥–∞", key="new_income_cat")
            st.number_input("–°—É–º–º–∞", value=0.0, key="new_income_amount")
            
            if st.button("–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞"):
                if st.session_state["new_income_cat"] and st.session_state["new_income_amount"] > 0:
                    new_row = pd.DataFrame({
                        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": [st.session_state["new_income_cat"]],
                        "–¢–∏–ø": ["–î–æ—Ö–æ–¥—ã"],
                        "–°—É–º–º–∞": [st.session_state["new_income_amount"]]
                    })
                    st.session_state.app_state.financial_data = pd.concat([st.session_state.app_state.financial_data, new_row])
                    st.success(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ—Ö–æ–¥–∞: {st.session_state['new_income_cat']}")
                    safe_rerun()
                else:
                    st.error("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å—É–º–º—É –±–æ–ª—å—à–µ 0.")
        
        with col2:
            # Expense data input
            st.subheader("–†–∞—Å—Ö–æ–¥—ã")
            
            # Extract existing expense data if available
            expense_categories = []
            expense_amounts = []
            
            if "–¢–∏–ø" in st.session_state.app_state.financial_data.columns:
                expense_data = st.session_state.app_state.financial_data[st.session_state.app_state.financial_data["–¢–∏–ø"] == "–†–∞—Å—Ö–æ–¥—ã"]
                if not expense_data.empty and "–ö–∞—Ç–µ–≥–æ—Ä–∏—è" in expense_data.columns:
                    for category, group in expense_data.groupby("–ö–∞—Ç–µ–≥–æ—Ä–∏—è"):
                        expense_categories.append(category)
                        expense_amounts.append(group["–°—É–º–º–∞"].sum())
            
            # Allow modifying expense data
            for i, category in enumerate(expense_categories):
                st.text_input(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–∞ {i+1}", value=category, key=f"expense_cat_{i}")
                st.number_input(f"–°—É–º–º–∞ {i+1}", value=float(expense_amounts[i]), key=f"expense_amount_{i}")
            
            # Add new expense category
            st.text_input("–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–∞", key="new_expense_cat")
            st.number_input("–°—É–º–º–∞", value=0.0, key="new_expense_amount")
            
            if st.button("–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞"):
                if st.session_state["new_expense_cat"] and st.session_state["new_expense_amount"] > 0:
                    new_row = pd.DataFrame({
                        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": [st.session_state["new_expense_cat"]],
                        "–¢–∏–ø": ["–†–∞—Å—Ö–æ–¥—ã"],
                        "–°—É–º–º–∞": [st.session_state["new_expense_amount"]]
                    })
                    st.session_state.app_state.financial_data = pd.concat([st.session_state.app_state.financial_data, new_row])
                    st.success(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–∞: {st.session_state['new_expense_cat']}")
                    safe_rerun()
                else:
                    st.error("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å—É–º–º—É –±–æ–ª—å—à–µ 0.")
        
        # Generate budget plan
        if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω –±—é–¥–∂–µ—Ç–∞"):
            with st.spinner("–°–æ–∑–¥–∞—é –ø–ª–∞–Ω –±—é–¥–∂–µ—Ç–∞..."):
                budget_plan = st.session_state.app_state.financial_agent.create_budget_plan(st.session_state.app_state.financial_data)
                
                st.subheader("–ü–ª–∞–Ω –±—é–¥–∂–µ—Ç–∞")
                
                # Display budget summary
                st.write(f"**–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:** {budget_plan['summary']}")
                
                # Display income and expenses
                col1, col2 = st.columns(2)
                
                with col1:
                    st.write("**–î–æ—Ö–æ–¥—ã:**")
                    income_df = pd.DataFrame({
                        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": budget_plan['income']['categories'],
                        "–°—É–º–º–∞": budget_plan['income']['amounts']
                    })
                    st.dataframe(income_df)
                    
                    # Income pie chart
                    fig = px.pie(income_df, values="–°—É–º–º–∞", names="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", title="–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ—Ö–æ–¥–æ–≤")
                    st.plotly_chart(fig, use_container_width=True)
                
                with col2:
                    st.write("**–†–∞—Å—Ö–æ–¥—ã:**")
                    expense_df = pd.DataFrame({
                        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": budget_plan['expenses']['categories'],
                        "–°—É–º–º–∞": budget_plan['expenses']['amounts'],
                        "–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ": budget_plan['expenses']['is_necessary']
                    })
                    st.dataframe(expense_df)
                    
                    # Expense pie chart
                    fig = px.pie(expense_df, values="–°—É–º–º–∞", names="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", title="–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤")
                    st.plotly_chart(fig, use_container_width=True)
                
                # Display savings
                st.metric("–°–±–µ—Ä–µ–∂–µ–Ω–∏—è", f"{budget_plan['savings']:,.0f} ‚ÇΩ")
                
                # Display recommendations
                st.subheader("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
                for rec in budget_plan['recommendations']:
                    st.write(f"- {rec}")
    
    with tab2:
        st.write("–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ü–µ–ª–µ–π.")
        
        # Goal input
        st.subheader("–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Ü–µ–ª—å")
        goal_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–µ–ª–∏", "–û—Ç–ø—É—Å–∫")
        target_amount = st.number_input("–¶–µ–ª–µ–≤–∞—è —Å—É–º–º–∞", min_value=0.0, value=100000.0)
        timeframe = st.slider("–°—Ä–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–º–µ—Å—è—Ü—ã)", min_value=1, max_value=60, value=12)
        
        # Calculate required monthly savings
        monthly_savings = target_amount / timeframe
        
        # Current financial state
        if "–¢–∏–ø" in st.session_state.app_state.financial_data.columns:
            income_data = st.session_state.app_state.financial_data[st.session_state.app_state.financial_data["–¢–∏–ø"] == "–î–æ—Ö–æ–¥—ã"]
            expense_data = st.session_state.app_state.financial_data[st.session_state.app_state.financial_data["–¢–∏–ø"] == "–†–∞—Å—Ö–æ–¥—ã"]
            
            total_income = income_data["–°—É–º–º–∞"].sum() if not income_data.empty else 0
            total_expenses = expense_data["–°—É–º–º–∞"].sum() if not expense_data.empty else 0
            current_savings = total_income - total_expenses
        else:
            current_savings = 0
        
        # Calculate feasibility
        feasibility = min(100, max(0, (current_savings / monthly_savings) * 100))
        
        # Display goal info
        st.subheader("–ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–∏")
        col1, col2, col3 = st.columns(3)
        col1.metric("–¢—Ä–µ–±—É–µ–º—ã–µ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è", f"{monthly_savings:,.0f} ‚ÇΩ")
        col2.metric("–¢–µ–∫—É—â–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è", f"{current_savings:,.0f} ‚ÇΩ")
        col3.metric("–í—ã–ø–æ–ª–Ω–∏–º–æ—Å—Ç—å", f"{feasibility:.1f}%")
        
        # Progress visualization
        st.subheader("–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏")
        
        # Generate time periods
        periods = list(range(1, timeframe + 1))
        accumulated = [monthly_savings * i for i in periods]
        
        # Create DataFrame for chart
        progress_df = pd.DataFrame({
            "–ú–µ—Å—è—Ü": periods,
            "–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è": accumulated,
            "–¶–µ–ª—å": [target_amount] * timeframe
        })
        
        fig = px.line(progress_df, x="–ú–µ—Å—è—Ü", y=["–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è", "–¶–µ–ª—å"], 
                     title=f"–ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π –¥–ª—è —Ü–µ–ª–∏ '{goal_name}'")
        st.plotly_chart(fig, use_container_width=True)
        
        # Recommendations
        st.subheader("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        
        if current_savings < monthly_savings:
            shortfall = monthly_savings - current_savings
            st.warning(f"–î–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è –Ω–∞ {shortfall:,.0f} ‚ÇΩ")
            
            # Get recommendations from financial agent
            with st.spinner("–ü–æ–ª—É—á–∞—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏..."):
                recommendations_prompt = f"""
                –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –¥–æ—Å—Ç–∏—á—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ü–µ–ª–∏ '{goal_name}' —Å —Å—É–º–º–æ–π {target_amount} ‚ÇΩ –∑–∞ {timeframe} –º–µ—Å—è—Ü–µ–≤.
                –¢–µ–∫—É—â–∏–π –¥–æ—Ö–æ–¥: {total_income} ‚ÇΩ.
                –¢–µ–∫—É—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {total_expenses} ‚ÇΩ.
                –¢–µ–∫—É—â–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è: {current_savings} ‚ÇΩ.
                –¢—Ä–µ–±—É–µ–º—ã–µ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è: {monthly_savings} ‚ÇΩ.
                –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {shortfall} ‚ÇΩ –≤ –º–µ—Å—è—Ü.
                
                –î–∞–π 3-5 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–≤–µ–ª–∏—á–∏—Ç—å —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è –∏–ª–∏ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã,
                —á—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å —Å–≤–æ–µ–π —Ü–µ–ª–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å—Ä–æ–∫.
                """
                
                response = st.session_state.app_state.rag_retriever.retrieve_and_generate(recommendations_prompt)["response"]
                st.write(response)
        else:
            st.success(f"–í—ã –º–æ–∂–µ—Ç–µ –¥–æ—Å—Ç–∏—á—å —Å–≤–æ–µ–π —Ü–µ–ª–∏ –∑–∞ {timeframe} –º–µ—Å—è—Ü–µ–≤ –ø—Ä–∏ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–≤–Ω–µ —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π!")
            
            # Suggest faster goal achievement
            potential_timeframe = int(target_amount / current_savings)
            if potential_timeframe < timeframe:
                st.info(f"–ü—Ä–∏ –≤–∞—à–µ–º —Ç–µ–∫—É—â–µ–º —É—Ä–æ–≤–Ω–µ —Å–±–µ—Ä–µ–∂–µ–Ω–∏–π –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ—Å—Ç–∏—á—å —Ü–µ–ª–∏ –≤—Å–µ–≥–æ –∑–∞ {potential_timeframe} –º–µ—Å—è—Ü–µ–≤ –≤–º–µ—Å—Ç–æ {timeframe}!")

def main():
    # Initialize session state
    if 'page' not in st.session_state:
        st.session_state.page = "main"
    
    # Sidebar navigation
    st.sidebar.title("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
    
    if st.sidebar.button("–ì–ª–∞–≤–Ω–∞—è"):
        st.session_state.page = "main"
        safe_rerun()
        
    if st.sidebar.button("–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö"):
        st.session_state.page = "data_input"
        safe_rerun()
        
    if st.sidebar.button("–ê–Ω–∞–ª–∏–∑"):
        st.session_state.page = "analyze"
        safe_rerun()
        
    if st.sidebar.button("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç"):
        st.session_state.page = "assistant"
        safe_rerun()
        
    if st.sidebar.button("–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞"):
        st.session_state.page = "budget_planning"
        safe_rerun()
    
    # Display current page
    if st.session_state.page == "main":
        main_page()
    elif st.session_state.page == "data_input":
        data_input_page()
    elif st.session_state.page == "analyze":
        analyze_page()
    elif st.session_state.page == "assistant":
        assistant_page()
    elif st.session_state.page == "budget_planning":
        budget_planning_page()

if __name__ == "__main__":
    main()
