import pandas as pd
import streamlit as st
import plotly.express as px
from langchain.chains import LLMChain
from langchain.prompts import PromptTemplate
from langchain_groq import ChatGroq
import matplotlib.pyplot as plt
import json
from io import StringIO
import re
import logging
from gtts import gTTS
import io
import sounddevice as sd
import soundfile as sf
import numpy as np
import av
import speech_recognition as sr
import wave
import queue
import threading
from streamlit_webrtc import webrtc_streamer, WebRtcMode, AudioProcessorBase

if 'financial_data' not in st.session_state:
    st.session_state.financial_data = pd.DataFrame()

logging.basicConfig(level=logging.DEBUG)


# –ü–∞—Ä—Å–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
def parse_financial_data(text):
    """–ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ DataFrame"""
    data = []
    current_type = ""
    for line in text.split('\n'):
        line = line.strip()
        type_match = re.match(r'^([–ê-–Ø–∞-—è]+)[:\s]', line)
        if type_match:
            current_type = type_match.group(1)
            continue
        if current_type and line.startswith('-'):
            match = re.split(r':\s*', line[1:].strip(), maxsplit=1)
            if len(match) == 2:
                category = match[0].strip()
                amount = re.sub(r'[^\d]', '', match[1])
                if amount.isdigit():
                    data.append({
                        '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': category,
                        '–¢–∏–ø': current_type,
                        '–°—É–º–º–∞': int(amount)
                    })
    return pd.DataFrame(data)


def safe_rerun():
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    –ï—Å–ª–∏ –≤ –≤–µ—Ä—Å–∏–∏ Streamlit –Ω–µ—Ç experimental_rerun, –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç.
    """
    if hasattr(st, "experimental_rerun"):
        st.experimental_rerun()
    else:
        st.warning("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ä—É—á–Ω—É—é: –≤ –≤–∞—à–µ–π –≤–µ—Ä—Å–∏–∏ Streamlit –Ω–µ—Ç experimental_rerun.")
        st.stop()


class AudioRecorder(AudioProcessorBase):
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –∞—É–¥–∏–æ–∫–∞–¥—Ä–æ–≤ —á–µ—Ä–µ–∑ webrtc_streamer.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –∫–∞–¥—Ä—ã –≤ self.frames, –ø–æ–∫–∞ recording=True.
    """

    def __init__(self):
        self.frames = []
        self.recording = False

    def recv(self, frame):
        if self.recording:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ—Ä–µ–π–º –≤ numpy-–º–∞—Å—Å–∏–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            audio_data = frame.to_ndarray()
            self.frames.append(audio_data)
        return frame

    def to_wav_bytes(self, sample_rate=16000):
        """
        –ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –∞—É–¥–∏–æ–∫–∞–¥—Ä—ã –≤ WAV-–±–∞–π—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö.
        –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ self.frames –º–æ–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
        """
        with io.BytesIO() as bio:
            with wave.open(bio, 'wb') as wf:
                wf.setnchannels(1)
                wf.setsampwidth(2)  # 16 –±–∏—Ç
                wf.setframerate(sample_rate)
                for frame_data in self.frames:
                    wf.writeframes(frame_data.tobytes())
            return bio.getvalue()


def audio_to_text(audio_bytes):
    """
    –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ —Å –ø–æ–º–æ—â—å—é Google API.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
    """
    r = sr.Recognizer()
    with io.BytesIO(audio_bytes) as bio:
        with sr.AudioFile(bio) as source:
            audio = r.record(source)
            try:
                return r.recognize_google(audio, language="ru-RU")
            except sr.UnknownValueError:
                return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å"
            except sr.RequestError:
                return "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"


class AppState:
    def __init__(self):
        self.financial_data = pd.DataFrame()
        self.chat_history = []
        self.recorder = AudioRecorder()
        self.recording = False
        self.temp_audio = None
        self.show_preview = False
        self.raw_data = None
        self.processed_data = pd.DataFrame()
        self.ai_analysis = {
            "columns": {},
            "metrics": [],
            "categories": [],
            "visualizations": []
        }


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if 'app_state' not in st.session_state:
    st.session_state.app_state = AppState()


@st.cache_data
def analyze_data_with_ai(data_input):
    analysis_prompt = f"""
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ CSV –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.
    –¢–≤–æ—è –∑–∞–¥–∞—á–∞:
    1. –û—Ç–æ–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, datetime, numeric, category, text).
    2. –û—Ç—Ñ–∏–ª—å—Ç—Ä—É–π –Ω–µ–Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Å—Ç–∞–≤—å —Ç–æ–ª—å–∫–æ —Ç–µ —Å—Ç–æ–ª–±—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≥–æ–¥–Ω—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º.
    3. –°—Ñ–æ—Ä–º–∏—Ä—É–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è–º, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö.

    –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON —Å —Ç–∞–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π:
    {{
        "columns": {{"–Ω–∞–∑–≤–∞–Ω–∏–µ_—Å—Ç–æ–ª–±—Ü–∞": "—Ç–∏–ø", ...}},
        "metrics": ["–∏–º–µ–Ω–∞ —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤"],
        "categories": ["–∏–º–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤"],
        "visualizations": [
            {{
                "type": "—Ç–∏–ø –¥–∏–∞–≥—Ä–∞–º–º—ã",
                "x": "–Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –æ—Å–∏ X",
                "y": "–Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –æ—Å–∏ Y",
                "desc": "–æ–ø–∏—Å–∞–Ω–∏–µ"
            }}
        ]
    }}

    –î–∞–Ω–Ω—ã–µ (–ø–µ—Ä–≤—ã–µ 2000 —Å–∏–º–≤–æ–ª–æ–≤):
    {data_input[:2000]}
    """
    raw_response = LLMChain(
        llm=llm,
        prompt=PromptTemplate.from_template("{prompt}")
    ).run(prompt=analysis_prompt)
    json_str = re.search(r'\{.*\}', raw_response, re.DOTALL).group()
    return json.loads(json_str)


def parse_csv_data(uploaded_file):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ CSV-—Ñ–∞–π–ª–æ–≤"""
    try:
        df = pd.read_csv(
            uploaded_file,
            sep=None,
            engine='python',
            encoding='utf-8',
            thousands=',',
            dtype={'–°—É–º–º–∞': 'Int64'},
            on_bad_lines='warn'
        )
        return df
    except UnicodeDecodeError:
        uploaded_file.seek(0)
        df = pd.read_csv(uploaded_file, encoding='latin1')
        return df
    except pd.errors.EmptyDataError:
        st.error("–§–∞–π–ª –ø—É—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏.")
        return None
    except pd.errors.ParserError:
        st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.")
        return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")
        return None


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM
GROQ_API_KEY = "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"
llm = ChatGroq(api_key=GROQ_API_KEY, model_name="llama3-70b-8192")


def is_complex_query(query: str) -> bool:
    complex_keywords = ["–±—é–¥–∂–µ—Ç", "–∞–Ω–∞–ª–∏–∑", "—Ä–∏—Å–∫", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"]
    return any(keyword in query.lower() for keyword in complex_keywords)


def handle_unclear_request(query):
    unclear_phrases = ["–Ω–µ –∑–Ω–∞—é", "–ø—Ä–∏–º–µ—Ä", "–ø–æ–º–æ—â—å"]
    if any(phrase in query.lower() for phrase in unclear_phrases):
        return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å..."
    return None


st.set_page_config(page_title="–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫", layout="wide", page_icon="üí∞")
st.markdown(
    """
    <style>
    .big-font {
        font-size: 40px !important;
        font-weight: bold;
        text-align: center;
        color: #2E86C1;
    }
    .medium-font {
        font-size: 20px !important;
        text-align: justify;
        color: #34495E;
    }
    .stButton button {
        background-color: #2E86C1;
        color: white;
        font-weight: bold;
        border-radius: 10px;
        padding: 10px 20px;
    }
    .stButton button:hover {
        background-color: #3498DB;
    }
    .stFileUploader div {
        border: 2px dashed #2E86C1;
        border-radius: 10px;
        padding: 20px;
    }
    </style>
    """,
    unsafe_allow_html=True,
)


def main_page():
    st.markdown(
        """
        <style>
        .big-font {
            font-size: 48px !important;
            font-weight: bold;
            text-align: center;
            color: #2E86C1;
            margin-bottom: 20px;
        }
        .medium-font {
            font-size: 20px !important;
            text-align: center;
            color: #34495E;
            margin-bottom: 40px;
        }
        .feature-card {
            background: linear-gradient(135deg, #f5f7fa, #c3cfe2);
            border-radius: 15px;
            padding: 20px;
            margin: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s, box-shadow 0.3s;
        }
        .feature-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
        }
        .testimonial-card {
            background: #ffffff;
            border-radius: 15px;
            padding: 20px;
            margin: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        .cta-button {
            background: linear-gradient(135deg, #2E86C1, #3498DB);
            color: white;
            font-weight: bold;
            border-radius: 25px;
            padding: 15px 30px;
            font-size: 18px;
            border: none;
            cursor: pointer;
            transition: transform 0.3s, box-shadow 0.3s;
        }
        .cta-button:hover {
            transform: scale(1.05);
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
        }
        </style>
        """,
        unsafe_allow_html=True,
    )
    st.markdown('<p class="big-font">–ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏—á–Ω—ã–º–∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±—é–¥–∂–µ—Ç–∞</p>',
                unsafe_allow_html=True)
    st.markdown(
        """
        <p class="medium-font">
        –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫! üöÄ<br><br>
        –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≤–∑—è—Ç—å –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª—å —Å–≤–æ–∏ —Ñ–∏–Ω–∞–Ω—Å—ã, –Ω–∞—É—á–∏—Ç—å—Å—è –≥—Ä–∞–º–æ—Ç–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å –±—é–¥–∂–µ—Ç 
        –∏ –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ü–µ–ª–µ–π. –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è 
        –≤–∞—à–∏–º–∏ –¥–æ—Ö–æ–¥–∞–º–∏ –∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏, –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–¥—É—â–µ–≥–æ.
        </p>
        """,
        unsafe_allow_html=True,
    )
    st.subheader("‚ú® –ö–ª—é—á–µ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏")
    col1, col2, col3 = st.columns(3)
    with col1:
        st.markdown(
            """
            <div class="feature-card">
                <h3>üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤</h3>
                <p>–†–µ–≥—É–ª—è—Ä–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–≤–æ–∏ —Ç—Ä–∞—Ç—ã –∏ –Ω–∞—Ö–æ–¥–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏.</p>
            </div>
            """,
            unsafe_allow_html=True,
        )
    with col2:
        st.markdown(
            """
            <div class="feature-card">
                <h3>üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞</h3>
                <p>–°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –±—é–¥–∂–µ—Ç—ã –∏ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º.</p>
            </div>
            """,
            unsafe_allow_html=True,
        )
    with col3:
        st.markdown(
            """
            <div class="feature-card">
                <h3>üéØ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏</h3>
                <p>–°—Ç–∞–≤—å—Ç–µ —Ü–µ–ª–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏.</p>
            </div>
            """,
            unsafe_allow_html=True,
        )
    st.subheader("üìã –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    st.write("–í–æ—Ç –∫–∞–∫ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:")
    example_data = pd.DataFrame({
        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": ["–ï–¥–∞", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "–ñ–∏–ª—å–µ"],
        "–°—É–º–º–∞": [15000, 5000, 7000, 20000]
    })
    col1, col2 = st.columns(2)
    with col1:
        st.write("**–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º**")
        st.bar_chart(example_data.set_index("–ö–∞—Ç–µ–≥–æ—Ä–∏—è"))
    with col2:
        st.write("**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—é–¥–∂–µ—Ç–∞**")
        fig, ax = plt.subplots()
        example_data.groupby("–ö–∞—Ç–µ–≥–æ—Ä–∏—è")["–°—É–º–º–∞"].sum().plot(kind="pie", autopct="%1.1f%%", ax=ax)
        st.pyplot(fig)
    st.subheader("üí¨ –û—Ç–∑—ã–≤—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    col1, col2, col3 = st.columns(3)
    with col1:
        st.markdown(
            """
            <div class="testimonial-card">
                <h4>–ê–Ω–Ω–∞, 28 –ª–µ—Ç</h4>
                <p>"–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ –º–æ–π –ø–æ–¥—Ö–æ–¥ –∫ —Ñ–∏–Ω–∞–Ω—Å–∞–º. –¢–µ–ø–µ—Ä—å —è —Ç–æ—á–Ω–æ –∑–Ω–∞—é, –∫—É–¥–∞ —É—Ö–æ–¥—è—Ç –º–æ–∏ –¥–µ–Ω—å–≥–∏!"</p>
            </div>
            """,
            unsafe_allow_html=True,
        )
    with col2:
        st.markdown(
            """
            <div class="testimonial-card">
                <h4>–ò–≤–∞–Ω, 35 –ª–µ—Ç</h4>
                <p>"–û—á–µ–Ω—å —É–¥–æ–±–Ω–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –±—é–¥–∂–µ—Ç –∏ –≤–∏–¥–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ü–µ–ª–µ–π."</p>
            </div>
            """,
            unsafe_allow_html=True,
        )
    with col3:
        st.markdown(
            """
            <div class="testimonial-card">
                <h4>–ú–∞—Ä–∏—è, 42 –≥–æ–¥–∞</h4>
                <p>"–°–æ–≤–µ—Ç—ã –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏ –ø–æ–º–æ–≥–ª–∏ –º–Ω–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ 20%!"</p>
            </div>
            """,
            unsafe_allow_html=True,
        )
    st.markdown("---")
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        st.markdown(
            """
            <button class="cta-button">–ù–∞—á–∞—Ç—å —Å–µ–π—á–∞—Å</button>
            """,
            unsafe_allow_html=True,
        )
        if st.button("–ù–∞—á–∞—Ç—å —Å–µ–π—á–∞—Å", key="start_button_unique"):
            st.success("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ —Ä–∞–∑–¥–µ–ª—É '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")


def profile_page():
    st.header("üìÅ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
    with st.form("profile_form"):
        col1, col2 = st.columns(2)
        with col1:
            name = st.text_input("–ò–º—è")
            surname = st.text_input("–§–∞–º–∏–ª–∏—è")
            age = st.number_input("–í–æ–∑—Ä–∞—Å—Ç", min_value=0, max_value=120)
        with col2:
            gender = st.selectbox("–ü–æ–ª", ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π", "–î—Ä—É–≥–æ–π"])
            phone = st.text_input("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
            email = st.text_input("–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞")
        submitted = st.form_submit_button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        if submitted:
            st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")


def reports_page():
    st.header("üìä –ê–Ω–∞–ª–∏–∑ –æ—Ç—á–µ—Ç–æ–≤")
    if 'raw_data' not in st.session_state:
        st.session_state.raw_data = None
    if 'processed_data' not in st.session_state:
        st.session_state.processed_data = pd.DataFrame()
    if 'ai_analysis' not in st.session_state:
        st.session_state.ai_analysis = {
            "columns": {},
            "metrics": [],
            "categories": [],
            "visualizations": []
        }
    st.markdown(
        """
        <style>
        .data-preview {
            border: 2px solid #2E86C1;
            border-radius: 10px;
            padding: 15px;
            margin: 15px 0;
            background-color: #f8f9fa;
        }
        .stSelectbox, .stButton {
            border: 2px solid #2E86C1 !important;
            border-radius: 8px !important;
            padding: 8px !important;
        }
        </style>
        """,
        unsafe_allow_html=True,
    )
    upload_option = st.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞–≥—Ä—É–∑–∫–∏:",
        ["üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥", "üìÅ –§–∞–π–ª"],
        horizontal=True
    )
    data_input = None
    if upload_option == "üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥":
        data_input = st.text_area(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV:",
            height=200,
            placeholder="–ü—Ä–∏–º–µ—Ä:\n–î–∞—Ç–∞,–ö–∞—Ç–µ–≥–æ—Ä–∏—è,–°—É–º–º–∞\n2024-01-01,–ï–¥–∞,1500"
        )
    else:
        uploaded_file = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV –∏–ª–∏ Excel —Ñ–∞–π–ª",
            type=["csv", "xlsx"]
        )
        if uploaded_file:
            try:
                if uploaded_file.name.endswith(".csv"):
                    data_input = uploaded_file.getvalue().decode("utf-8")
                else:
                    df = pd.read_excel(uploaded_file)
                    data_input = df.to_csv(index=False)
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {str(e)}")
    if data_input and st.button("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"):
        with st.spinner("–ò–ò –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É..."):
            try:
                analysis_prompt = f"""
                –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ CSV –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.
                –¢–≤–æ—è –∑–∞–¥–∞—á–∞:
                1. –û—Ç–æ–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, datetime, numeric, category, text).
                2. –û—Ç—Ñ–∏–ª—å—Ç—Ä—É–π –Ω–µ–Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Å—Ç–∞–≤—å —Ç–æ–ª—å–∫–æ —Ç–µ —Å—Ç–æ–ª–±—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≥–æ–¥–Ω—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º.
                3. –°—Ñ–æ—Ä–º–∏—Ä—É–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è–º, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö.

                –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON —Å —Ç–∞–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π:
                {{
                    "columns": {{"–Ω–∞–∑–≤–∞–Ω–∏–µ_—Å—Ç–æ–ª–±—Ü–∞": "—Ç–∏–ø", ...}},
                    "metrics": ["–∏–º–µ–Ω–∞ —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤"],
                    "categories": ["–∏–º–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤"],
                    "visualizations": [
                        {{
                            "type": "—Ç–∏–ø –¥–∏–∞–≥—Ä–∞–º–º—ã",
                            "x": "–Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –æ—Å–∏ X",
                            "y": "–Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –æ—Å–∏ Y",
                            "desc": "–æ–ø–∏—Å–∞–Ω–∏–µ"
                        }}
                    ]
                }}

                –î–∞–Ω–Ω—ã–µ (–ø–µ—Ä–≤—ã–µ 2000 —Å–∏–º–≤–æ–ª–æ–≤):
                {data_input[:2000]}
                """
                raw_response = LLMChain(
                    llm=llm,
                    prompt=PromptTemplate.from_template("{prompt}")
                ).run(prompt=analysis_prompt)
                json_str = re.search(r'\{.*\}', raw_response, re.DOTALL).group()
                analysis = json.loads(json_str)
                df = pd.read_csv(StringIO(data_input))
                valid_metrics = [col for col in analysis["metrics"] if col in df.columns]
                valid_categories = [col for col in analysis["categories"] if col in df.columns]
                st.session_state["processed_data"] = df
                st.session_state["ai_analysis"] = {
                    "metrics": valid_metrics or df.select_dtypes(include="number").columns.tolist(),
                    "categories": valid_categories or df.select_dtypes(exclude="number").columns.tolist(),
                    "visualizations": analysis["visualizations"]
                }
                st.success("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            except json.JSONDecodeError:
                st.error("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ.")
            except Exception as e:
                st.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    processed_data = st.session_state.get("processed_data", pd.DataFrame())
    ai_analysis = st.session_state.get("ai_analysis", {"visualizations": []})
    if not processed_data.empty:
        st.markdown("---")
        st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
        if not ai_analysis.get("visualizations"):
            st.info("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è–º.")
            return
        viz_types = [v["type"] for v in ai_analysis["visualizations"]]
        selected_viz = st.selectbox("–¢–∏–ø –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏", viz_types)
        viz_config = next(v for v in ai_analysis["visualizations"] if v["type"] == selected_viz)
        col1, col2 = st.columns(2)
        with col1:
            try:
                x_default = viz_config["x"] if viz_config["x"] in ai_analysis["categories"] else \
                ai_analysis["categories"][0]
                x_axis = st.selectbox("–û—Å—å X", ai_analysis["categories"],
                                      index=ai_analysis["categories"].index(x_default))
            except Exception:
                x_axis = st.selectbox("–û—Å—å X", ai_analysis["categories"])
        with col2:
            try:
                y_default = viz_config["y"] if viz_config["y"] in ai_analysis["metrics"] else ai_analysis["metrics"][0]
                y_axis = st.selectbox("–û—Å—å Y", ai_analysis["metrics"], index=ai_analysis["metrics"].index(y_default))
            except Exception:
                y_axis = st.selectbox("–û—Å—å Y", ai_analysis["metrics"])
        if st.button("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫"):
            try:
                if selected_viz == "line":
                    fig = px.line(processed_data, x=x_axis, y=y_axis)
                elif selected_viz == "bar":
                    fig = px.bar(processed_data, x=x_axis, y=y_axis)
                elif selected_viz == "pie":
                    fig = px.pie(processed_data, names=x_axis, values=y_axis)
                elif selected_viz == "scatter":
                    fig = px.scatter(processed_data, x=x_axis, y=y_axis)
                else:
                    st.error("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –¥–∏–∞–≥—Ä–∞–º–º—ã.")
                    return
                st.plotly_chart(fig, use_container_width=True)
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è: {str(e)}")


def text_to_speech(text, lang='ru'):
    tts = gTTS(text=text, lang=lang)
    audio_bytes = io.BytesIO()
    tts.write_to_fp(audio_bytes)
    audio_bytes.seek(0)
    return audio_bytes


def play_audio(audio_bytes):
    audio_data, sample_rate = sf.read(audio_bytes)
    sd.play(audio_data, sample_rate)
    sd.wait()


def ai_assistant_page():
    st.header("üí¨ –ß–∞—Ç —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º")

    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä AudioRecorder,
    # —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å –º–µ—Ç–æ–¥–æ–º to_wav_bytes.
    st.session_state.recorder = AudioRecorder()

    defaults = {
        'chat_history': [],
        'recording': False,
        'temp_audio': None,
        'show_preview': False,
        'recognized_text': ""
    }
    for k, v in defaults.items():
        if k not in st.session_state:
            st.session_state[k] = v

    input_mode = st.radio("–†–µ–∂–∏–º –≤–≤–æ–¥–∞:", ["–¢–µ–∫—Å—Ç", "–ì–æ–ª–æ—Å"], horizontal=True)

    # --- –†–ï–ñ–ò–ú –ì–û–õ–û–°–ê ---
    if input_mode == "–ì–æ–ª–æ—Å":
        st.markdown(
            """
            <style>
            button[aria-label="start"],
            button[aria-label="stop"],
            label[for="audio-input-select"] {
                visibility: hidden !important;
                height: 0 !important;
            }
            </style>
            """,
            unsafe_allow_html=True
        )
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üé§ –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å", disabled=st.session_state.recording):
                st.session_state.recording = True
                st.session_state.recorder.recording = True
                st.session_state.show_preview = False
                st.session_state.temp_audio = None
                st.session_state.recognized_text = ""
        with col2:
            if st.button("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", disabled=not st.session_state.recording):
                st.session_state.recording = False
                st.session_state.recorder.recording = False
                audio_bytes = st.session_state.recorder.to_wav_bytes(sample_rate=16000)
                if audio_bytes:
                    st.session_state.temp_audio = audio_bytes
                    st.session_state.show_preview = True
                    recognized = audio_to_text(audio_bytes)
                    st.session_state.recognized_text = recognized
                st.session_state.recorder.frames = []
        if st.session_state.recording:
            st.info("üî¥ –ò–¥—ë—Ç –∑–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")
        if st.session_state.show_preview and st.session_state.temp_audio:
            st.markdown("---")
            st.subheader("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–∏")
            st.audio(st.session_state.temp_audio, format="audio/wav")
            st.write("**–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞:**")
            st.text_area("–¢–µ–∫—Å—Ç –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", value=st.session_state.recognized_text, height=100)
            col_a, col_b, col_c = st.columns(3)
            with col_a:
                if st.button("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ"):
                    st.session_state.chat_history.append({
                        "role": "user",
                        "content": st.session_state.recognized_text,
                        "audio": st.session_state.temp_audio
                    })
                    st.session_state.show_preview = False
                    st.session_state.temp_audio = None
                    st.session_state.recognized_text = ""
                    safe_rerun()
            with col_b:
                if st.button("üîÑ –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å"):
                    st.session_state.show_preview = False
                    st.session_state.temp_audio = None
                    st.session_state.recognized_text = ""
            with col_c:
                if st.button("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"):
                    st.session_state.show_preview = False
                    st.session_state.temp_audio = None
                    st.session_state.recognized_text = ""
        webrtc_streamer(
            key="speech-to-text",
            mode=WebRtcMode.SENDONLY,
            audio_processor_factory=lambda: st.session_state.recorder,
            rtc_configuration={"iceServers": [{"urls": ["stun:stun.l.google.com:19302"]}]},
            media_stream_constraints={"audio": True},
        )
        user_input = ""
    else:
        user_input = st.text_input("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")

    if 'audio_cache' not in st.session_state:
        st.session_state.audio_cache = {}

    st.markdown(
        """
        <style>
        .chat-message {
            padding: 1rem;
            border-radius: 1rem;
            margin: 0.5rem 0;
            max-width: 80%;
        }
        .user-message {
            background-color: #2E86C1;
            color: white;
            margin-left: auto;
        }
        .assistant-message {
            background-color: #f0f2f6;
            margin-right: auto;
        }
        </style>
        """,
        unsafe_allow_html=True
    )
    for msg in st.session_state.chat_history:
        if msg["role"] == "user":
            st.markdown(f'<div class="chat-message user-message">{msg["content"]}</div>', unsafe_allow_html=True)
        else:
            st.markdown(f'<div class="chat-message assistant-message">{msg["content"]}</div>', unsafe_allow_html=True)
            if msg.get("audio"):
                st.audio(msg["audio"], format='audio/mp3')
    if input_mode == "–¢–µ–∫—Å—Ç":
        col_send, _ = st.columns([1, 3])
        with col_send:
            if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å"):
                if user_input.strip():
                    st.session_state.chat_history.append({
                        "role": "user",
                        "content": user_input,
                        "audio": None
                    })
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É LLM, –Ω–∞–ø—Ä–∏–º–µ—Ä LLMChain
    st.markdown("---")
    if st.button("–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"):
        st.session_state.chat_history = []
        safe_rerun()


def budget_tips_page():
    st.header("üí° –°–æ–≤–µ—Ç—ã –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –±—é–¥–∂–µ—Ç–∞")
    st.subheader("üìå –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –±—é–¥–∂–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    st.write("""
    - **–ü—Ä–∞–≤–∏–ª–æ 50/30/20:** 
        - 50% –¥–æ—Ö–æ–¥–∞ –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã (–∂–∏–ª—å–µ, –µ–¥–∞, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç).
        - 30% –Ω–∞ –∂–µ–ª–∞–Ω–∏—è (—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è, —Ö–æ–±–±–∏).
        - 20% –Ω–∞ —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏.
    - **–í–µ–¥–∏—Ç–µ —É—á–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤:** –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ –≤—Å–µ —Ç—Ä–∞—Ç—ã, —á—Ç–æ–±—ã –ø–æ–Ω–∏–º–∞—Ç—å, –∫—É–¥–∞ —É—Ö–æ–¥—è—Ç –¥–µ–Ω—å–≥–∏.
    - **–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –∑–∞—Ä–∞–Ω–µ–µ:** –°–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –±—é–¥–∂–µ—Ç –Ω–∞ –º–µ—Å—è—Ü –≤–ø–µ—Ä–µ–¥.
    """)
    st.subheader("üìâ –°–æ–≤–µ—Ç—ã –ø–æ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤")
    st.write("""
    - **–û—Ç–∫–∞–∂–∏—Ç–µ—Å—å –æ—Ç –Ω–µ–Ω—É–∂–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫:** –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –∫–∞–∫–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ.
    - **–ü–æ–∫—É–ø–∞–π—Ç–µ —Å —É–º–æ–º:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫–∏–¥–∫–∏, –∞–∫—Ü–∏–∏ –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ —Ü–µ–Ω—ã.
    - **–ì–æ—Ç–æ–≤—å—Ç–µ –¥–æ–º–∞:** –≠—Ç–æ –¥–µ—à–µ–≤–ª–µ –∏ –ø–æ–ª–µ–∑–Ω–µ–µ, —á–µ–º –ø–∏—Ç–∞—Ç—å—Å—è –≤ –∫–∞—Ñ–µ.
    - **–≠–∫–æ–Ω–æ–º—å—Ç–µ –Ω–∞ –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö —É—Å–ª—É–≥–∞—Ö:** –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–≥–∞—é—â–∏–µ –ø—Ä–∏–±–æ—Ä—ã.
    """)
    st.subheader("üìà –°–æ–≤–µ—Ç—ã –ø–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—é –¥–æ—Ö–æ–¥–æ–≤")
    st.write("""
    - **–ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ —Å–µ–±—è:** –ü—Ä–æ–π–¥–∏—Ç–µ –∫—É—Ä—Å—ã, —á—Ç–æ–±—ã –ø–æ–≤—ã—Å–∏—Ç—å –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é.
    - **–ò—â–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–æ—Ö–æ–¥–∞:** –§—Ä–∏–ª–∞–Ω—Å, –ø–æ–¥—Ä–∞–±–æ—Ç–∫–∞, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏.
    - **–ú–æ–Ω–µ—Ç–∏–∑–∏—Ä—É–π—Ç–µ —Ö–æ–±–±–∏:** –ï—Å–ª–∏ –≤—ã —Ö–æ—Ä–æ—à–æ —Ä–∏—Å—É–µ—Ç–µ, –ø–∏—à–µ—Ç–µ –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–µ—Ç–µ, –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ–∏ —Ä–∞–±–æ—Ç—ã.
    """)
    st.subheader("üìä –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã")
    st.write("""
    - **–ù–∞—á–Ω–∏—Ç–µ —Å –º–∞–ª–æ–≥–æ:** –ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–µ–±–æ–ª—å—à–∏–µ —Å—É–º–º—ã, —á—Ç–æ–±—ã –Ω–∞—É—á–∏—Ç—å—Å—è.
    - **–î–∏–≤–µ—Ä—Å–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ –ø–æ—Ä—Ç—Ñ–µ–ª—å:** –í–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ –≤ —Ä–∞–∑–Ω—ã–µ –∞–∫—Ç–∏–≤—ã (–∞–∫—Ü–∏–∏, –æ–±–ª–∏–≥–∞—Ü–∏–∏, –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å).
    - **–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:** –ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±—ã—Å—Ç—Ä–æ, –¥—É–º–∞–π—Ç–µ –æ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–µ.
    - **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π:** –û–Ω–∏ –ø–æ–º–æ–≥—É—Ç –≤–∞–º –Ω–∞—á–∞—Ç—å —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏.
    """)
    st.subheader("üßÆ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –±—é–¥–∂–µ—Ç–∞")
    col1, col2 = st.columns(2)
    with col1:
        income = st.number_input("–í–∞—à –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥ (—Ä—É–±.):", min_value=0)
    with col2:
        expenses = st.number_input("–í–∞—à–∏ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã (—Ä—É–±.):", min_value=0)
    if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –±—é–¥–∂–µ—Ç"):
        savings = income - expenses
        if savings > 0:
            st.success(f"‚úÖ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ª–æ–∂–∏—Ç—å {savings} —Ä—É–±. –≤ –º–µ—Å—è—Ü!")
            st.write("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            if savings >= 0.2 * income:
                st.write("- –í—ã –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ—Ç–µ –±–æ–ª–µ–µ 20% –¥–æ—Ö–æ–¥–∞. –≠—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
            else:
                st.write("- –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è –¥–æ 20% –¥–æ—Ö–æ–¥–∞.")
        else:
            st.error(f"‚ùå –í–∞–º –Ω—É–∂–Ω–æ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ {-savings} —Ä—É–±.")
            st.write("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
            st.write("- –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã –∏ –Ω–∞–π–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –≥–¥–µ –º–æ–∂–Ω–æ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å.")
    st.subheader("üìã –ü—Ä–∏–º–µ—Ä –±—é–¥–∂–µ—Ç–∞ –ø–æ –ø—Ä–∞–≤–∏–ª—É 50/30/20")
    if income > 0:
        necessities = 0.5 * income
        wants = 0.3 * income
        savings_investments = 0.2 * income
        st.write(f"""
        - **–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã (50%):** {necessities:.2f} —Ä—É–±.
        - **–ñ–µ–ª–∞–Ω–∏—è (30%):** {wants:.2f} —Ä—É–±.
        - **–°–±–µ—Ä–µ–∂–µ–Ω–∏—è –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ (20%):** {savings_investments:.2f} —Ä—É–±.
        """)
    else:
        st.write("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –¥–æ—Ö–æ–¥, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø—Ä–∏–º–µ—Ä –±—é–¥–∂–µ—Ç–∞.")


st.sidebar.title("üåê –ù–∞–≤–∏–≥–∞—Ü–∏—è")
page = st.sidebar.radio(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
    ("–ì–ª–∞–≤–Ω–∞—è", "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "–ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç", "–ê–Ω–∞–ª–∏–∑ –º–æ–∏—Ö –æ—Ç—á–µ—Ç–æ–≤", "–°–æ–≤–µ—Ç—ã –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –±—é–¥–∂–µ—Ç–∞")
)

if page == "–ì–ª–∞–≤–Ω–∞—è":
    main_page()
elif page == "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
    profile_page()
elif page == "–ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç":
    ai_assistant_page()
elif page == "–ê–Ω–∞–ª–∏–∑ –º–æ–∏—Ö –æ—Ç—á–µ—Ç–æ–≤":
    reports_page()
elif page == "–°–æ–≤–µ—Ç—ã –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –±—é–¥–∂–µ—Ç–∞":
    budget_tips_page()


def process_file(uploaded_file):
    try:
        if uploaded_file.name.endswith(".csv"):
            df = pd.read_csv(uploaded_file)
        elif uploaded_file.name.endswith(".xlsx"):
            df = pd.read_excel(uploaded_file)
        else:
            st.error("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã CSV –∏ XLSX.")
            return None
        st.session_state.financial_data = df
        st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        return df.to_string(index=False)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        return None
